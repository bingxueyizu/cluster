# 设置Redis监听的IP地址和端口号，默认监听所有IP地址和6379端口
bind 0.0.0.0
 
#禁用危险命令
rename-command keys ""
rename-command flushdb ""
rename-command FLUSHALL ""
 
#被设置为 "no" 时，每次删除操作都会尽可能地立即释放被删除键所占用的内存。
#被设置为 "yes" 时，Redis 会将删除操作的内存释放延迟到后续时刻，避免在删除短时间大量键时产生过多的内存回收操作，从而提高删除操作的性能。
lazyfree-lazy-server-del yes
 
#no时，当 Redis 收到一个 DEL 命令请求删除一个键时，它会立即同步地从数据库中删除这个键，并释放其占用的内存资源。这种操作可能会引起阻塞，特别是当删除大对象（比如包含大量元素的集合或哈希表）时，释放内存的过程可能会消耗较长时间，影响服务其他客户端请求的性能。
#yes时，Redis 在接收到 DEL 命令时并不会立即删除并释放内存，而是将删除任务放入后台线程中异步执行。这样做的好处在于，主线程可以快速返回继续处理其他客户端请求，从而提高 Redis 对高并发场景的响应速度和整体性能。
lazyfree-lazy-user-del yes
 
#被设置为 "no" 时，主节点在向从节点同步数据时会尽可能快地将所有数据刷新到从节点上，从而确保快速的数据同步，但会增加网络流量和主节点的负载。
#被设置为 "yes" 时，主节点将采用一种“懒惰”策略，在一定程度上延迟将数据刷新到从节点上，以减少网络流量和主节点的负载。这意味着主节点会在一段时间内收集多个命令，然后一次性地发送给从节点，从而减少数据同步的频率。
replica-lazy-flush yes
 
 
#replicaof 10.0.0.231 6379
 
# docker方式运行，此值必须为no
daemonize no
 
# 是否启用保护模式，允许远程访问
protected-mode no
 
# 指定Redis监听的端口号
port 6379
 
# 开启集群模式
cluster-enabled yes
# 集群节点超时时间
cluster-node-timeout 5000
# 集群配置文件
cluster-config-file redis-cluster.conf
#这个IP地址将被用来通知其他节点如何访问到当前节点
cluster-announce-ip redis-master-0
 
# 激活重哈希
activerehashing yes
 
# 不使用监管模式
supervised no
 
# 从节点为只读模式
replica-serve-stale-data yes
replica-read-only yes
# 关闭无盘复制模式
repl-diskless-sync no
# 无盘复制模式的延迟时间
repl-diskless-sync-delay 5
# 开启TCP_NODELAY
repl-disable-tcp-nodelay no
# 从节点的优先级
replica-priority 100
 
# 配置TCP连接的最大等待队列长度 增加此值以处理更多的等待连接
tcp-backlog 2048  
 
# 配置客户端连接超时时间，0表示无超时时间
timeout 0
 
# 配置TCP keepalive参数 减少此值以更快检测和断开空闲连接
tcp-keepalive 60  
 
# 关闭对后台任务的通知
notify-keyspace-events ""
 
# 配置最大客户端连接数 确保您的操作系统支持这么多文件描述符
maxclients 1000000 
 
###################################日志级别及目录###################################
# 日志级别，info表示记录大部分有用的信息，适合生产环境
loglevel notice  
# 日志存储目录
#logfile /data/redis.log 
###################################客户端连接口令，主从口令######################
# 设置客户端连接服务端的验证口令
requirepass 123
# 设置主从服务器之间通信时的密码
masterauth 123
###################################配置RDB持久化###################################
#通过快照的形式，将某一时刻的数据集保存到磁盘上的二进制文件中
#适用于定时备份，以及灾难恢复。
# 在900s内，如果至少有1个key进行了修改，就进行持久化操作
save 900 1
# 在300s内，如果至少有10个key进行了修改，就进行持久化操作
save 300 10
# 在60s内，如果至少有10000个key进行了修改，就进行持久化操作
save 60 10000 
# 配置如果持久化出错，Redis是否禁止写入命令 yes:禁止写入命令，no:允许写入命令（存在数据丢失风险）
stop-writes-on-bgsave-error yes
# 配置是否压缩rdb文件。[开启(yes)的话，会消耗一定的cpu资源]
rdbcompression yes
# 保存rdb文件的时候，进行错误的检查校验
rdbchecksum yes
# 默认持久化保存后的文件名
dbfilename dump.rdb
# rdb文件保存的目录，目录需存在
dir /data
 
# 如果后台保存错误则停止写入
stop-writes-on-bgsave-error yes
 
###################################配置AOF持久化###################################
#记录服务器接收到的每一个写操作命令，并将这些命令追加到文件的末尾。
#通过重放这些命令来恢复数据，适用于需要高数据完整性的场景。
appendonly yes 
appendfilename "appendonly.aof"
 
appendfsync everysec
# always 每次修改都进行持久化操作  
# everysec 每秒执行一次持久化操作
# no 不执行持久化操作，相当于未开启aof持久化策略
 
# 设置为yes表示rewrite期间对新写操作不fsync，暂时存在内存中，等rewrite完成后再写入，默认为no(rewrite期间可以fsync)，建议yes
no-appendfsync-on-rewrite yes
 
# AOF文件自动重写的触发条件,表示当AOF文件大小是上一次重写后的AOF文件大小的100%时，触发重写
auto-aof-rewrite-percentage 100
 
# 设置触发AOF重写的最小文件大小,避免AOF文件很小的时候触发重写，减少不必要的重写操作
auto-aof-rewrite-min-size 64mb
 
# 配置在启动加载AOF文件时对不完整文件的处理,设置为yes，允许加载不完整的AOF文件，提高数据恢复的灵活性
aof-load-truncated yes
 
# 启用增量式fsync，减少磁盘I/O操作
aof-rewrite-incremental-fsync yes
 
# 在AOF重写期间，使用备用的子进程进行写操作，减少对主进程的影响
#aof-rewrite-use-rdb-preamble yes
#——————————————————————————————————————————————
# 配置Lua脚本执行时间限制
# 调整阈值
lua-time-limit 5000
 
# 调整慢查询日志配置
slowlog-log-slower-than 10000
slowlog-max-len 128
 
# 配置事件通知
notify-keyspace-events ""
 
###################################内存相关设置###################################
# 增加Redis的最大内存限制，以容纳更多数据
#增加内存限制，根据您的服务器实际内存调整
maxmemory 40G
 
# 设置在达到最大内存后的处理策略为LRU算法
maxmemory-policy allkeys-lru  
 
# 调整数据结构的配置以优化内存使用
hash-max-ziplist-entries 1024
hash-max-ziplist-value 128
set-max-intset-entries 1024
list-max-ziplist-size -2
zset-max-ziplist-entries 128
zset-max-ziplist-value 128
 
# 配置HyperLogLog数据结构的最大内存使用
hll-sparse-max-bytes 3000
